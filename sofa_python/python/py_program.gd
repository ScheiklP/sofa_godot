extends Reference
##
## @author: Christoph Haas
##
## @desc: models a python program that defines a SOFA scene via SofaPython3 (https://github.com/sofa-framework/SofaPython3).
## 
## Note: Since sofa_env is based on SofaPython3 addition of sofa_env components to a [PyProgram] is supported as well.
##
#class_name PyProgram

func get_class() -> String:
	return "PyProgram"
func is_class(clazz: String) -> bool:
	return .is_class(clazz) or (clazz == get_class())

const PyContext = preload("res://addons/sofa_godot_plugin/sofa_python/sofa_python_context.gd")

const PROGRAM_TEMPLATE = \
"""# File generated by the SOFA-Godot plugin on {datetime}.
{imports}

PLUGINS = {plugins}

def createScene({root_node}: Sofa.Core.Node):
	{scene_description} = {"{root_node_key}": {root_node}}
{code}

	return {scene_description}
"""

var _imports: PoolStringArray = ["import Sofa", "import Sofa.Core"]
var _plugins = {}
var _sofa_root_identifier: String
var _instances: PoolStringArray = []
var _scene_description_identifier: String
var _scene_description_root_key: String
var _scene_description_keys: PoolStringArray = []

var _code : PoolStringArray = []

func _init(sofa_root_identifier: String, scene_description_identifier: String = "scene_description", scene_description_root_key: String = "root_node"):
	assert(not sofa_root_identifier.empty(),         "Empty identifier for the root node")
	assert(not scene_description_identifier.empty(), "Empty identifier for the scene description dictionary")
	assert(not scene_description_root_key.empty(),   "Empty key for the root node")
	_sofa_root_identifier         = sofa_root_identifier
	_scene_description_identifier = scene_description_identifier
	_scene_description_root_key   = scene_description_root_key

func add_import(import: String):
	if not import in _imports:
		_imports.append(import)

func add_imports(imports: Array):
	for import in imports:
		add_import(import)

func get_imports() -> PoolStringArray:
	var imports = PoolStringArray(_imports)
	for plugin_import in _plugins.values():
		if plugin_import.empty():
			continue
		if not plugin_import in imports:
			imports.append(plugin_import)
	return imports


func add_plugin_list(import: String, plugin_list: String) -> bool:
	if plugin_list.empty():# or import.empty():
		return false
	if _plugins.has(plugin_list):
		return false
	else:
		_plugins[plugin_list] = import
		return true

func add_plugin_lists(plugin_lists: Dictionary):
	for plugin_list_name in plugin_lists.keys():
		add_plugin_list(plugin_lists[plugin_list_name], plugin_list_name)

func get_plugin_lists() -> PoolStringArray:
	return PoolStringArray(_plugins.keys())


func has_instance(instance: String) -> bool:
	return instance in _instances

func add_instance(identifier: String):
	assert(not identifier in _instances, "Duplicate instance: " + identifier)
	_instances.append(identifier)

func get_instances() -> PoolStringArray:
	return _instances


func has_scene_description_key(key: String) -> bool:
	return key in _scene_description_keys

func add_scene_description_key(key: String):
	assert(not key in _scene_description_keys, "Duplicate key: " + key)
	_scene_description_keys.append(key)

func get_scene_description_keys() -> PoolStringArray:
	return _scene_description_keys


func get_sofa_root_identifier() -> String:
	return _sofa_root_identifier

## <sofa_root_identifier>["a.b.instance"]
func sofa_root_access(instance: Node) -> String:
	var sofa_path = PyContext.get_sofa_root_access_path(instance)
	# check if root node
	if sofa_path == ".":
		return get_sofa_root_identifier()
	else:
		return "%s[\"%s\"]" % [get_sofa_root_identifier(), sofa_path]


func get_scene_description_identifier() -> String:
	return _scene_description_identifier

## <scene_description_identifier>["key"]
func scene_description_access(key: String) -> String:
	return "%s[\"%s\"]" % [get_scene_description_identifier(), key]

func get_scene_description_root_key() -> String:
	return _scene_description_root_key

## append python code
func append_code(code: String):
	_code.append(code)

func get_code() -> String:
	var placeholder = {}
	placeholder["datetime"] = Time.get_datetime_string_from_system(false, true)
	placeholder["imports"] = get_imports().join("\n")
	if get_plugin_lists().empty():
		placeholder["plugins"] = "[]"
	else:
		placeholder["plugins"] = get_plugin_lists().join(" + ")
	placeholder["root_node"]         = get_sofa_root_identifier()
	placeholder["scene_description"] = get_scene_description_identifier()
	placeholder["root_node_key"]     = get_scene_description_root_key()
	placeholder["code"]              = _code.join("\n")
	return PROGRAM_TEMPLATE.format(placeholder)
